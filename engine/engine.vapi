/* engine.vapi generated by valac 0.32.0, do not modify. */

namespace Engine {
	[CCode (cheader_filename = "engine.h")]
	public abstract class Component : GLib.Object {
		public Component ();
		public global::Engine.Entity entity { get; set; }
	}
	[CCode (cheader_filename = "engine.h")]
	public class Engine {
		public Engine ();
		public void addSystem (global::Engine.EntitySystem system);
		public global::Engine.Entity createEntity ();
		public Gee.List<global::Engine.Entity> getEntitiesFor (Gee.List<GLib.Type> componenttypes);
		public void removeSystem (global::Engine.EntitySystem system);
		public void update ();
	}
	[CCode (cheader_filename = "engine.h")]
	public class Entity : GLib.Object {
		public Entity ();
		public void add_component (global::Engine.Component c);
		public T get_component<T> ();
		public T get_components<T> ();
		public bool has_component (GLib.Type t);
		public Entity.with_name (string name);
		public string name { get; set; }
	}
	[CCode (cheader_filename = "engine.h")]
	public class EntityManager {
		public EntityManager ();
		public void addEntity (global::Engine.Entity entity);
		public Gee.List<global::Engine.Entity> getEntities ();
		public Gee.List<global::Engine.Entity> getEntitiesFor (Gee.List<GLib.Type> componenttypes);
		public void removeEntity (global::Engine.Entity entity);
	}
	[CCode (cheader_filename = "engine.h")]
	public abstract class EntitySystem : GLib.Object {
		public weak global::Engine.Engine engine;
		public EntitySystem ();
		public virtual void addedToEngine (global::Engine.Engine engine);
		public virtual void removedFromEngine (global::Engine.Engine engine);
		public abstract void update (float deltaTime);
	}
	[CCode (cheader_filename = "engine.h")]
	public class SystemManager {
		public SystemManager ();
		public void addSystem (global::Engine.EntitySystem system);
		public global::Engine.EntitySystem getSystem (GLib.Type t);
		public Gee.List<global::Engine.EntitySystem> getSystems ();
		public void removeSystem (global::Engine.EntitySystem system);
	}
	[CCode (cheader_filename = "engine.h")]
	public abstract class UpdateComponent : global::Engine.Component {
		public UpdateComponent ();
		public abstract void update ();
	}
}
